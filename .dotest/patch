---
 .gitignore                         |   16 +++++++++++-
 linden/indra/cmake/LLKDU.cmake     |   18 +++++++++++++
 linden/indra/cmake/QuickTime.cmake |   49 ++++++++++++++++++++++++++++++++++++
 3 files changed, 82 insertions(+), 1 deletions(-)
 create mode 100644 linden/indra/cmake/LLKDU.cmake
 create mode 100644 linden/indra/cmake/QuickTime.cmake

diff --git a/.gitignore b/.gitignore
index f0b16890fd6a115a7bb42d8b6ed297e5c7df2c21..14dc8e8f3de46b8f134f5817cc3113939e187717 100644
--- a/.gitignore
+++ b/.gitignore
@@ -5,7 +5,20 @@
 # Since we only care about the actual source code files,
 # all the artwork and libraries are ignored, as are the
 # files that are created when you compile.
-# 
+#
+
+# STUFF
+
+*~
+*.*~
+*.diff
+*.rej
+*.old
+*.new
+*.patch
+rug/
+mypatches/
+
 
 # ARTWORK
 
@@ -41,3 +54,4 @@ linden/installed.xml
 linden/indra/CMakeFiles
 linden/indra/temp
 linden/indra/test_apps
+*.pyc
\ No newline at end of file
diff --git a/linden/indra/cmake/LLKDU.cmake b/linden/indra/cmake/LLKDU.cmake
new file mode 100644
index 0000000000000000000000000000000000000000..f103dcf6649326451010bdbaf228710320ccfacb
--- /dev/null
+++ b/linden/indra/cmake/LLKDU.cmake
@@ -0,0 +1,18 @@
+# -*- cmake -*-
+include(Prebuilt)
+
+if (NOT STANDALONE AND EXISTS ${LIBS_CLOSED_DIR}/llkdu)
+  use_prebuilt_binary(kdu)
+  if (WINDOWS)
+    set(KDU_LIBRARY debug kdu_cored optimized kdu_core)
+  else (WINDOWS)
+    set(KDU_LIBRARY kdu)
+  endif (WINDOWS)
+
+  set(KDU_INCLUDE_DIR ${LIBS_PREBUILT_DIR}/include)
+
+  set(LLKDU_LIBRARY llkdu)
+  set(LLKDU_STATIC_LIBRARY llkdu_static)
+  set(LLKDU_LIBRARIES ${LLKDU_LIBRARY})
+  set(LLKDU_STATIC_LIBRARIES ${LLKDU_STATIC_LIBRARY})
+endif (NOT STANDALONE AND EXISTS ${LIBS_CLOSED_DIR}/llkdu)
diff --git a/linden/indra/cmake/QuickTime.cmake b/linden/indra/cmake/QuickTime.cmake
new file mode 100644
index 0000000000000000000000000000000000000000..4352709d3e9c769607ee83d90349cea9bdc078ce
--- /dev/null
+++ b/linden/indra/cmake/QuickTime.cmake
@@ -0,0 +1,49 @@
+# -*- cmake -*-
+
+if(INSTALL_PROPRIETARY)
+  include(Prebuilt)
+  use_prebuilt_binary(quicktime)
+endif(INSTALL_PROPRIETARY)
+
+if (DARWIN)
+  include(CMakeFindFrameworks)
+  find_library(QUICKTIME_LIBRARY QuickTime)
+elseif (WINDOWS)
+  set(QUICKTIME_SDK_DIR "$ENV{PROGRAMFILES}/QuickTime SDK"
+      CACHE PATH "Location of the QuickTime SDK.")
+
+  find_library(DEBUG_QUICKTIME_LIBRARY qtmlclient
+               PATHS
+               ${ARCH_PREBUILT_DIRS_DEBUG}
+               "${QUICKTIME_SDK_DIR}\\libraries"
+               )
+
+  find_library(RELEASE_QUICKTIME_LIBRARY qtmlclient
+               PATHS
+               ${ARCH_PREBUILT_DIRS_RELEASE}
+               "${QUICKTIME_SDK_DIR}\\libraries"
+               )
+
+  if (DEBUG_QUICKTIME_LIBRARY AND RELEASE_QUICKTIME_LIBRARY)
+    set(QUICKTIME_LIBRARY 
+        optimized ${RELEASE_QUICKTIME_LIBRARY}
+        debug ${DEBUG_QUICKTIME_LIBRARY}
+        )
+        
+  endif (DEBUG_QUICKTIME_LIBRARY AND RELEASE_QUICKTIME_LIBRARY)
+  
+  include_directories(
+    ${LIBS_PREBUILT_DIR}/${LL_ARCH_DIR}/include/quicktime
+    "${QUICKTIME_SDK_DIR}\\CIncludes"
+    )
+endif (DARWIN)
+
+mark_as_advanced(QUICKTIME_LIBRARY)
+
+if (QUICKTIME_LIBRARY)
+  set(QUICKTIME ON CACHE BOOL "Build with QuickTime streaming media support.")
+endif (QUICKTIME_LIBRARY)
+
+if (QUICKTIME)
+  add_definitions(-DLL_QUICKTIME_ENABLED=1)
+endif (QUICKTIME)
-- 
1.5.6.5


